basePath: /
definitions:
  auth.CredentialsResponse:
    properties:
      token:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  auth.PasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      firstName:
        maxLength: 150
        type: string
      lastName:
        maxLength: 150
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      passwordConfirmation:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - passwordConfirmation
    type: object
  catalog.BookResponse:
    properties:
      authorName:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/catalog.ImageResponse'
        type: array
      price:
        type: integer
      releaseDate:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  catalog.ImageRequest:
    properties:
      description:
        type: string
      id:
        type: string
    type: object
  catalog.ImageResponse:
    properties:
      description:
        type: string
      id:
        type: string
      link:
        type: string
    type: object
  catalog.PaginatedBooksResponse:
    properties:
      currentPage:
        type: integer
      perPage:
        type: integer
      results:
        items:
          $ref: '#/definitions/catalog.BookResponse'
        type: array
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  catalog.PresignURLResponse:
    properties:
      url:
        type: string
    type: object
  catalog.UpdateBook:
    properties:
      authorName:
        maxLength: 100
        type: string
      description:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/catalog.ImageRequest'
        type: array
      title:
        maxLength: 100
        type: string
    type: object
  server.ErrorResponse:
    properties:
      details:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
  shop.CreateOrder:
    properties:
      bookId:
        maxLength: 36
        type: string
    required:
    - bookId
    type: object
  shop.OrderResponse:
    properties:
      bookId:
        type: string
      clientSecret:
        type: string
      createdAt:
        type: string
      id:
        type: string
      paymentIntentId:
        type: string
      status:
        type: string
      total:
        type: integer
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  shop.PaginatedOrdersResponse:
    properties:
      currentPage:
        type: integer
      perPage:
        type: integer
      results:
        items:
          $ref: '#/definitions/shop.OrderResponse'
        type: array
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  shop.ShopBookResponse:
    properties:
      url:
        type: string
    type: object
host: http://localhost:8080
info:
  contact:
    email: raphael_professional@yahoo.com
    name: Raphael Collin
  description: Endpoints available in the E-book store REST API.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://github.com/C0lliNN
  title: E-book Store
  version: "1.0"
paths:
  /api/v1/books:
    get:
      parameters:
      - in: query
        name: authorName
        type: string
      - in: query
        name: description
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: perPage
        type: integer
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/catalog.PaginatedBooksResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Fetch Books
      tags:
      - Catalog
    post:
      consumes:
      - multipart/form-data
      parameters:
      - in: formData
        maxLength: 100
        name: authorName
        required: true
        type: string
      - in: formData
        maxLength: 100
        name: contentId
        required: true
        type: string
      - in: formData
        name: description
        required: true
        type: string
      - in: formData
        name: price
        required: true
        type: integer
      - in: formData
        name: releaseDate
        required: true
        type: string
      - in: formData
        maxLength: 100
        name: title
        required: true
        type: string
      - description: Book Poster
        in: formData
        name: poster
        required: true
        type: file
      - description: Book Content in PDF
        in: formData
        name: content
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/catalog.BookResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Create a new Book
      tags:
      - Catalog
  /api/v1/books/{id}:
    delete:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Success
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Delete a Book
      tags:
      - Catalog
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/catalog.BookResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Fetch Book by ID
      tags:
      - Catalog
    patch:
      consumes:
      - application/json
      parameters:
      - description: Book Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/catalog.UpdateBook'
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Update the provided Book
      tags:
      - Catalog
  /api/v1/healthcheck:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: REST API Healtcheck
  /api/v1/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.CredentialsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Login using email and password
      tags:
      - Auth
  /api/v1/orders:
    get:
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: perPage
        type: integer
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shop.PaginatedOrdersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Fetch Orders
      tags:
      - Shop
    post:
      consumes:
      - application/json
      parameters:
      - description: Order Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/shop.CreateOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/shop.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Create a new Order
      tags:
      - Shop
  /api/v1/orders/{id}:
    get:
      parameters:
      - description: orderId ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shop.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Fetch Order by ID
      tags:
      - Shop
  /api/v1/orders/{id}/download:
    get:
      parameters:
      - description: orderId ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shop.ShopBookResponse'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Download the book for the given Order
      tags:
      - Shop
  /api/v1/password-reset:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "204":
          description: success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Reset the password for the given email
      tags:
      - Auth
  /api/v1/presign-url:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/catalog.PresignURLResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Generate a Presigned URL for saving an image poster to S3
      tags:
      - Catalog
  /api/v1/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.CredentialsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /api/v1/stripe/webhook:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Handle stripe webhooks
      tags:
      - Shop
swagger: "2.0"
