// Code generated by mockery v2.40.1. DO NOT EDIT.

package server

import (
	context "context"

	catalog "github.com/ebookstore/internal/core/catalog"

	mock "github.com/stretchr/testify/mock"
)

// MockCatalog is an autogenerated mock type for the Catalog type
type MockCatalog struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: _a0, _a1
func (_m *MockCatalog) CreateBook(_a0 context.Context, _a1 catalog.CreateBook) (catalog.BookResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 catalog.BookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateBook) (catalog.BookResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateBook) catalog.BookResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(catalog.BookResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateBook) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: _a0, _a1
func (_m *MockCatalog) DeleteBook(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBookByID provides a mock function with given fields: _a0, _a1
func (_m *MockCatalog) FindBookByID(_a0 context.Context, _a1 string) (catalog.BookResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBookByID")
	}

	var r0 catalog.BookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (catalog.BookResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) catalog.BookResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(catalog.BookResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBooks provides a mock function with given fields: _a0, _a1
func (_m *MockCatalog) FindBooks(_a0 context.Context, _a1 catalog.SearchBooks) (catalog.PaginatedBooksResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBooks")
	}

	var r0 catalog.PaginatedBooksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.SearchBooks) (catalog.PaginatedBooksResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.SearchBooks) catalog.PaginatedBooksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(catalog.PaginatedBooksResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.SearchBooks) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratePutPreSignedUrl provides a mock function with given fields: _a0
func (_m *MockCatalog) GeneratePutPreSignedUrl(_a0 context.Context) (catalog.PresignURLResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePutPreSignedUrl")
	}

	var r0 catalog.PresignURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (catalog.PresignURLResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) catalog.PresignURLResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(catalog.PresignURLResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: _a0, _a1
func (_m *MockCatalog) UpdateBook(_a0 context.Context, _a1 catalog.UpdateBook) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateBook) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCatalog creates a new instance of MockCatalog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCatalog(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCatalog {
	mock := &MockCatalog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
