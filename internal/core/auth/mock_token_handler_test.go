// Code generated by mockery v2.40.1. DO NOT EDIT.

package auth

import mock "github.com/stretchr/testify/mock"

// MockTokenHandler is an autogenerated mock type for the TokenHandler type
type MockTokenHandler struct {
	mock.Mock
}

// ExtractUserFromToken provides a mock function with given fields: tokenString
func (_m *MockTokenHandler) ExtractUserFromToken(tokenString string) (User, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ExtractUserFromToken")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (User, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTokenForUser provides a mock function with given fields: user
func (_m *MockTokenHandler) GenerateTokenForUser(user User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenForUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTokenHandler creates a new instance of MockTokenHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenHandler {
	mock := &MockTokenHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
