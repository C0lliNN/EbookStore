// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	model "github.com/c0llinn/ebook-store/internal/shop/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the Repository type
type OrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: order
func (_m *OrderRepository) Create(order *model.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *OrderRepository) FindByID(id string) (model.Order, error) {
	ret := _m.Called(id)

	var r0 model.Order
	if rf, ok := ret.Get(0).(func(string) model.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByQuery provides a mock function with given fields: query
func (_m *OrderRepository) FindByQuery(query model.OrderQuery) (model.PaginatedOrders, error) {
	ret := _m.Called(query)

	var r0 model.PaginatedOrders
	if rf, ok := ret.Get(0).(func(model.OrderQuery) model.PaginatedOrders); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(model.PaginatedOrders)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.OrderQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: order
func (_m *OrderRepository) Update(order *model.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
