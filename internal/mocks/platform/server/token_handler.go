// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/ebookstore/internal/core/auth"
	mock "github.com/stretchr/testify/mock"
)

// TokenHandler is an autogenerated mock type for the TokenHandler type
type TokenHandler struct {
	mock.Mock
}

// ExtractUserFromToken provides a mock function with given fields: token
func (_m *TokenHandler) ExtractUserFromToken(token string) (auth.User, error) {
	ret := _m.Called(token)

	var r0 auth.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (auth.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) auth.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(auth.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenHandler creates a new instance of TokenHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenHandler {
	mock := &TokenHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
