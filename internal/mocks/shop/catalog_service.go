// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/ebookstore/internal/core/catalog"

	io "io"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CatalogService is an autogenerated mock type for the CatalogService type
type CatalogService struct {
	mock.Mock
}

// FindBookByID provides a mock function with given fields: ctx, bookId
func (_m *CatalogService) FindBookByID(ctx context.Context, bookId string) (catalog.BookResponse, error) {
	ret := _m.Called(ctx, bookId)

	var r0 catalog.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) catalog.BookResponse); ok {
		r0 = rf(ctx, bookId)
	} else {
		r0 = ret.Get(0).(catalog.BookResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookContent provides a mock function with given fields: ctx, bookId
func (_m *CatalogService) GetBookContent(ctx context.Context, bookId string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, bookId)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCatalogService creates a new instance of CatalogService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCatalogService(t testing.TB) *CatalogService {
	mock := &CatalogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
