// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/c0llinn/ebook-store/internal/catalog"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Catalog is an autogenerated mock type for the Catalog type
type Catalog struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: _a0, _a1
func (_m *Catalog) CreateBook(_a0 context.Context, _a1 catalog.CreateBook) (catalog.BookResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 catalog.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context, catalog.CreateBook) catalog.BookResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(catalog.BookResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.CreateBook) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: _a0, _a1
func (_m *Catalog) DeleteBook(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBookByID provides a mock function with given fields: _a0, _a1
func (_m *Catalog) FindBookByID(_a0 context.Context, _a1 string) (catalog.BookResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 catalog.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) catalog.BookResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(catalog.BookResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBooks provides a mock function with given fields: _a0, _a1
func (_m *Catalog) FindBooks(_a0 context.Context, _a1 catalog.SearchBooks) (catalog.PaginatedBooksResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 catalog.PaginatedBooksResponse
	if rf, ok := ret.Get(0).(func(context.Context, catalog.SearchBooks) catalog.PaginatedBooksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(catalog.PaginatedBooksResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.SearchBooks) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: _a0, _a1
func (_m *Catalog) UpdateBook(_a0 context.Context, _a1 catalog.UpdateBook) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.UpdateBook) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCatalog creates a new instance of Catalog. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCatalog(t testing.TB) *Catalog {
	mock := &Catalog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
