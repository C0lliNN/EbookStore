// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	query "github.com/ebookstore/internal/core/query"
	mock "github.com/stretchr/testify/mock"

	shop "github.com/ebookstore/internal/core/shop"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, order
func (_m *Repository) Create(ctx context.Context, order *shop.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shop.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Repository) FindByID(ctx context.Context, id string) (shop.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 shop.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (shop.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) shop.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(shop.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByQuery provides a mock function with given fields: ctx, q, p
func (_m *Repository) FindByQuery(ctx context.Context, q query.Query, p query.Page) (shop.PaginatedOrders, error) {
	ret := _m.Called(ctx, q, p)

	var r0 shop.PaginatedOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Query, query.Page) (shop.PaginatedOrders, error)); ok {
		return rf(ctx, q, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Query, query.Page) shop.PaginatedOrders); ok {
		r0 = rf(ctx, q, p)
	} else {
		r0 = ret.Get(0).(shop.PaginatedOrders)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Query, query.Page) error); ok {
		r1 = rf(ctx, q, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, order
func (_m *Repository) Update(ctx context.Context, order *shop.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shop.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
