// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/ebookstore/internal/core/catalog"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, book
func (_m *Repository) Create(ctx context.Context, book *catalog.Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Repository) FindByID(ctx context.Context, id string) (catalog.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 catalog.Book
	if rf, ok := ret.Get(0).(func(context.Context, string) catalog.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(catalog.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByQuery provides a mock function with given fields: ctx, query
func (_m *Repository) FindByQuery(ctx context.Context, query catalog.BookQuery) (catalog.PaginatedBooks, error) {
	ret := _m.Called(ctx, query)

	var r0 catalog.PaginatedBooks
	if rf, ok := ret.Get(0).(func(context.Context, catalog.BookQuery) catalog.PaginatedBooks); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(catalog.PaginatedBooks)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.BookQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, book
func (_m *Repository) Update(ctx context.Context, book *catalog.Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
