// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	model "github.com/c0llinn/ebook-store/internal/catalog/model"
	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the Repository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: book
func (_m *BookRepository) Create(book *model.Book) error {
	ret := _m.Called(book)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *BookRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *BookRepository) FindByID(id string) (model.Book, error) {
	ret := _m.Called(id)

	var r0 model.Book
	if rf, ok := ret.Get(0).(func(string) model.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByQuery provides a mock function with given fields: query
func (_m *BookRepository) FindByQuery(query model.BookQuery) (model.PaginatedBooks, error) {
	ret := _m.Called(query)

	var r0 model.PaginatedBooks
	if rf, ok := ret.Get(0).(func(model.BookQuery) model.PaginatedBooks); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(model.PaginatedBooks)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.BookQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: book
func (_m *BookRepository) Update(book *model.Book) error {
	ret := _m.Called(book)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
