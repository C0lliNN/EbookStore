// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "github.com/c0llinn/ebook-store/internal/catalog/model"

	testing "testing"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: ctx, book, posterImage, bookContent
func (_m *Service) CreateBook(ctx context.Context, book *model.Book, posterImage io.ReadSeeker, bookContent io.ReadSeeker) error {
	ret := _m.Called(ctx, book, posterImage, bookContent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Book, io.ReadSeeker, io.ReadSeeker) error); ok {
		r0 = rf(ctx, book, posterImage, bookContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBook provides a mock function with given fields: ctx, id
func (_m *Service) DeleteBook(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBookByID provides a mock function with given fields: ctx, id
func (_m *Service) FindBookByID(ctx context.Context, id string) (model.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Book
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBooks provides a mock function with given fields: ctx, query
func (_m *Service) FindBooks(ctx context.Context, query model.BookQuery) (model.PaginatedBooks, error) {
	ret := _m.Called(ctx, query)

	var r0 model.PaginatedBooks
	if rf, ok := ret.Get(0).(func(context.Context, model.BookQuery) model.PaginatedBooks); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(model.PaginatedBooks)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.BookQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: ctx, book
func (_m *Service) UpdateBook(ctx context.Context, book *model.Book) error {
	ret := _m.Called(ctx, book)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Book) error); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t testing.TB) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
